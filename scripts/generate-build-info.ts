import { execSync } from 'node:child_process';
import { writeFileSync, mkdirSync } from 'node:fs';
import { resolve } from 'node:path';

function getEnv(name: string): string | undefined {
  return process.env[name];
}

function git(cmd: string): string {
  try {
    return execSync(cmd, { stdio: ['ignore', 'pipe', 'ignore'] })
      .toString()
      .trim();
  } catch {
    return '';
  }
}

const commitSha =
  getEnv('VERCEL_GIT_COMMIT_SHA') || git('git rev-parse HEAD');
const commitShortSha =
  commitSha ? commitSha.substring(0, 7) : '';
const ref = getEnv('VERCEL_GIT_COMMIT_REF') || git('git rev-parse --abbrev-ref HEAD');
const prNumber = getEnv('VERCEL_GIT_PULL_REQUEST_ID');
const env = getEnv('VERCEL_ENV') || getEnv('NODE_ENV') || 'development';
const url = getEnv('VERCEL_URL') || 'http://localhost:3000';
const runtime = `node ${process.version}`;
const builtAt = new Date().toISOString();
const buildYear = builtAt.slice(0, 4);

const info = {
  commitSha,
  commitShortSha,
  ref,
  prNumber: prNumber ?? null,
  env,
  url,
  runtime,
  builtAt,
  buildYear,
};

const jsonFile = resolve(process.cwd(), 'build-info.json');
writeFileSync(jsonFile, JSON.stringify(info, null, 2));

const libDir = resolve(process.cwd(), 'lib');
mkdirSync(libDir, { recursive: true });
const tsFile = resolve(libDir, 'build-info.ts');
const tsContent = `// AUTO-GENERATED by scripts/generate-build-info.ts
// Do not edit by hand.

export const buildInfo: {
  commitSha: string;
  commitShortSha: string;
  ref?: string | null;
  prNumber: string | null;
  env: string;
  url: string;
  runtime: string;
  builtAt: string;
  buildYear: string;
} = ${JSON.stringify(info, null, 2)};
`;
writeFileSync(tsFile, tsContent);
