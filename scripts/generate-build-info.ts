import { execSync } from 'node:child_process';
import { writeFileSync, mkdirSync } from 'node:fs';
import { resolve } from 'node:path';

function sh(cmd: string): string {
  try {
    return execSync(cmd, { stdio: ['ignore', 'pipe', 'ignore'] }).toString().trim();
  } catch {
    return '';
  }
}

const commit = process.env.VERCEL_GIT_COMMIT_SHA || sh('git rev-parse HEAD');
const shortCommit = commit.slice(0, 7);
const branch = process.env.VERCEL_GIT_COMMIT_REF || sh('git rev-parse --abbrev-ref HEAD');
const prNumber = process.env.VERCEL_GIT_PULL_REQUEST_ID || null;
const env = process.env.VERCEL_ENV || process.env.NODE_ENV || 'development';
const url = process.env.VERCEL_URL || 'http://localhost:3000';
const runtime = `node ${process.version}`;
const buildIso = new Date().toISOString();
const buildYear = buildIso.slice(0, 4);

const info = { commit, shortCommit, branch, prNumber, env, url, runtime, buildIso, buildYear } as const;

const outDir = resolve(process.cwd(), 'lib');
mkdirSync(outDir, { recursive: true });
const outFile = resolve(outDir, 'build-info.ts');
const out = `// AUTO-GENERATED by scripts/generate-build-info.ts\n// Do not edit by hand.\n\nexport const buildInfo = ${JSON.stringify(info, null, 2)} as const;\n`;
writeFileSync(outFile, out);
console.log('âœ“ Wrote lib/build-info.ts');
