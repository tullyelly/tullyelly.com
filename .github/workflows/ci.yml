name: CI

on:
  push:
    branches: ['**']   # all branches; we'll gate deploys below
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-check:
    name: Build & Check
    runs-on: ubuntu-latest
    # This job pushes the 'preview' branch on non-PR runs, so it needs write.
    permissions:
      contents: write
      pull-requests: read

    env:
      CI: true
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Clean install
        run: npm ci --include=optional

      - name: Verify critical deps present
        run: npm run verify:deps

      # sanity-check native bindings
      - name: Verify sharp binding
        env:
          SHARP_IGNORE_GLOBAL_LIBVIPS: '1'
        run: |
          node -p "process.platform + ' ' + process.arch"
          node -e "require('sharp'); console.log('sharp: OK')"

      - name: Rebuild native addons (lightningcss + sharp)
        env:
          npm_config_platform: linux
          npm_config_arch: x64
          SHARP_IGNORE_GLOBAL_LIBVIPS: '1'
        run: |
          npm rebuild lightningcss --foreground-scripts
          npm rebuild sharp --foreground-scripts

      - name: Run CI pipeline
        run: npm run ci --if-present

      # ── deploy throttling logic (no dynamic keys; fixed outputs) ─────────────
      - name: Compute deploy flags
        id: flags
        shell: bash
        run: |
          set -euo pipefail

          EVENT_NAME="${{ github.event_name }}"
          BEFORE_SHA="${{ github.event.before }}"
          AFTER_SHA="${{ github.sha }}"
          COMMIT_MSG="$(git log -1 --pretty=%B || true)"

          # Determine changed files range (push-only relevant; PRs won't deploy)
          if [[ -z "${BEFORE_SHA}" || "${BEFORE_SHA}" == 0000000000000000000000000000000000000000 ]]; then
            RANGE="HEAD^..HEAD"
          else
            RANGE="${BEFORE_SHA}..${AFTER_SHA}"
          fi

          CHANGED="$(git diff --name-only ${RANGE} || true)"

          # Paths that should trigger a preview/prod deploy
          if echo "${CHANGED}" | grep -E -q '^(app/|pages/|src/|components/|public/|next\.config(\..*)?$|vercel\.json|package\.json|package-lock\.json|pnpm-lock\.yaml)'; then
            DEPLOY_CHANGED=true
          else
            DEPLOY_CHANGED=false
          fi

          # Respect "[skip deploy]" in the last commit message
          if echo "${COMMIT_MSG}" | grep -qi '\[skip deploy\]'; then
            SKIP_DEPLOY=true
          else
            SKIP_DEPLOY=false
          fi

          # Final gate: only non-PR events may deploy
          if [[ "${EVENT_NAME}" != "pull_request" && "${DEPLOY_CHANGED}" == true && "${SKIP_DEPLOY}" == false ]]; then
            SHOULD_DEPLOY=true
          else
            SHOULD_DEPLOY=false
          fi

          # Expose fixed-name outputs (actionlint-safe)
          {
            echo "deploy_changed=${DEPLOY_CHANGED}"
            echo "skip_deploy=${SKIP_DEPLOY}"
            echo "should_deploy=${SHOULD_DEPLOY}"
          } >> "$GITHUB_OUTPUT"

          echo "Event: ${EVENT_NAME}"
          echo "Changed files (for info):"
          echo "${CHANGED}"

      # PRs: Vercel automatically builds preview for PRs.

      # Non-PR branches: refresh long-lived preview branch & trigger hooks.
      - name: Fast-forward preview branch to this commit
        if: steps.flags.outputs.should_deploy == 'true' && success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch origin
          git branch -f preview HEAD
          git push --force-with-lease origin preview

      - name: Trigger Vercel Manual Preview Deploy
        if: steps.flags.outputs.should_deploy == 'true' && success()
        run: curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_URL }}"

      # Optional: production deploy on main
      - name: Trigger Vercel Production Deploy
        if: steps.flags.outputs.should_deploy == 'true' && github.ref == 'refs/heads/main' && success()
        run: curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_URL_PROD }}"

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
      PLAYWRIGHT_USE_SYSTEM_CHROME: '0'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Clean install
        run: npm ci --include=optional

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npx @playwright/test --version | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright system dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true' && env.PLAYWRIGHT_USE_SYSTEM_CHROME != '1'
        run: npx playwright install-deps chromium

      - name: Install Playwright Chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true' && env.PLAYWRIGHT_USE_SYSTEM_CHROME != '1'
        run: npx playwright install chromium

      - name: Install system Chromium (fallback)
        if: env.PLAYWRIGHT_USE_SYSTEM_CHROME == '1'
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser || sudo apt-get install -y chromium

      - name: Run e2e tests
        run: npx playwright test --reporter=html

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report
          path: playwright-report

      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/trace.zip