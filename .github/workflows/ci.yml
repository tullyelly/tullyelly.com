name: CI

on:
  push:
    branches: ['**']          # fast feedback on all branches
  pull_request:
    branches: [main]          # full suite when proposing changes to main

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-check:
    name: Build & Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      CI: true
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1        # bump to 0 if a task needs full history

      # Composite setup (node, cache, deps)
      - uses: ./.github/actions/setup

      - name: Generate build info
        run: npm run gen:build-info

      # Skip heavy work when irrelevant
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            images:
              - 'public/**/*'
              - '**/*.{png,jpg,jpeg,webp,avif,svg,gif}'
            native:
              - 'package.json'
              - 'package-lock.json'
              - 'scripts/**'

      # Native addon sanity only when it matters (native deps changed or on main)
      - name: Verify sharp binding
        if: github.ref_name == 'main' || steps.filter.outputs.native == 'true'
        env:
          SHARP_IGNORE_GLOBAL_LIBVIPS: '1'
        run: |
          node -p "process.platform + ' ' + process.arch"
          node -e "require('sharp'); console.log('sharp: OK')"

      - name: Rebuild native addons (lightningcss + sharp)
        if: github.ref_name == 'main' || steps.filter.outputs.native == 'true'
        env:
          npm_config_platform: linux
          npm_config_arch: x64
          SHARP_IGNORE_GLOBAL_LIBVIPS: '1'
        run: |
          npm rebuild lightningcss --foreground-scripts
          npm rebuild sharp --foreground-scripts

      # Split the CI pipeline so we can selectively skip heavy steps
      - name: Lint & Format
        run: npm run lint && npm run format:check

      - name: Typecheck
        run: npm run typecheck

      - name: Unit tests
        env:
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: npm run test:ci -- --coverage --coverageReporters=lcov --coverageReporters=json-summary --coverageReporters=text

      - name: Check coverage threshold
        run: |
          node -e "const fs=require('fs');const pct=JSON.parse(fs.readFileSync('coverage/coverage-summary.json')).total.lines.pct;if(pct<80){console.error('Coverage '+pct+'% below 80%');process.exit(1);}" 

      - name: Upload coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json

      - name: Generate coverage badge
        run: |
          node -e "const fs=require('fs');const summary=JSON.parse(fs.readFileSync('coverage/coverage-summary.json'));const pct=Math.round(summary.total.lines.pct);const color=pct>=90?'brightgreen':pct>=80?'green':pct>=70?'yellow':'orange';fs.writeFileSync('coverage/badge.json',JSON.stringify({schemaVersion:1,label:'coverage',message:pct+'%',color}));" 

      - name: Setup Pages
        if: github.ref_name == 'main'
        uses: actions/configure-pages@v4

      - name: Upload coverage for Pages
        if: github.ref_name == 'main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage

      - name: Optimize images (changed only)
        if: steps.filter.outputs.images == 'true'
        run: npm run images:optimize

      - name: Images check (changed only)
        if: steps.filter.outputs.images == 'true'
        run: npm run images:check

      - name: Validate frontmatter
        run: npm run validate-frontmatter

      - name: Validate SEO
        run: npm run validate-seo

      - name: Build
        # harmless env so Next/Auth won't crash during build
        env:
          DATABASE_URL: postgresql://dummy:dummy@127.0.0.1:5432/dummy?sslmode=disable&options=-c%20search_path%3Dauth%2Cdojo%2Cpublic
          NEXTAUTH_URL: http://localhost:3000
          AUTH_SECRET: ci-dummy
          GOOGLE_CLIENT_ID: ci-dummy
          GOOGLE_CLIENT_SECRET: ci-dummy
        run: npm run build

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-check
    if: github.event_name == 'pull_request' || github.ref_name == 'main'
    env:
      NODE_ENV: test
      NEXT_TELEMETRY_DISABLED: 1
      VERCEL_ENV: preview
      # point Playwright to a cacheable path
      PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      # your app env
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      NEXTAUTH_URL: http://localhost:3000
      AUTH_SECRET: ci-dummy
      GOOGLE_CLIENT_ID: ci-dummy
      GOOGLE_CLIENT_SECRET: ci-dummy
      AUTH_RULES_JSON: '{"ownerDomains":["tullyelly.com"],"publicPaths":["/","/login","/api/auth"],"protectedPaths":["/shaolin-scrolls","/admin"],"ownerOnlyPaths":["/shaolin-scrolls/admin"],"toggles":{"allowAnyEmailOnPreview":true}}'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: ./.github/actions/setup

      # grab the local @playwright/test version for cache keying
      - name: Get Playwright version
        id: pw
        shell: bash
        run: |
          echo "version=$(node -e 'console.log(require(\"@playwright/test/package.json\").version)')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-pw-${{ steps.pw.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-pw-

      # ðŸŒŸ New: install browsers + OS deps via CLI (works on Ubuntu 24.04)
      # Specify chromium to keep it lean; drop "chromium" to install all browsers.
      - name: Install Playwright (browsers + OS deps)
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npx playwright test --reporter=html

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report
          path: playwright-report

      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/trace.zip

  deploy-coverage:
    name: Deploy Coverage
    runs-on: ubuntu-latest
    needs: build-and-check
    if: github.ref_name == 'main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
