name: CI

on:
  push:
    branches: ["**"] # fast feedback on all branches
  pull_request:
    branches: [main] # full suite when proposing changes to main
  schedule:
    - cron: "0 6 * * 1"

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-check:
    name: Build & Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      run_e2e: ${{ steps.filter.outputs.e2e }}
    env:
      CI: true
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for format diffing against main

      # Composite setup (node, cache, deps)
      - uses: ./.github/actions/setup

      - name: Secrets scan (Secretlint)
        run: npm run secrets:scan

      - name: Generate build info
        run: npm run gen:build-info

      # Skip heavy work when irrelevant
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            images:
              - 'public/**/*'
              - '**/*.{png,jpg,jpeg,webp,avif,svg,gif}'
            native:
              - 'package.json'
              - 'package-lock.json'
              - 'scripts/**'
            content:
              - 'content/**/*'
              - 'docs/**/*'
              - '**/*.md'
              - '**/*.mdx'
            seo:
              - 'content/**/*'
              - 'docs/**/*'
              - 'app/**/*.{ts,tsx,js,jsx,md,mdx}'
              - 'lib/seo/**'
              - 'next.config.mjs'
            security:
              - 'middleware.ts'
              - 'next.config.mjs'
              - 'auth.ts'
              - 'lib/security/**'
              - 'app/**/middleware.{ts,tsx}'
              - 'pages/**/middleware.{ts,tsx}'
              - 'app/api/**'
            build:
              - 'app/**'
              - 'components/**'
              - 'lib/**'
              - 'pages/**'
              - 'public/**/*'
              - 'next.config.mjs'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - 'tailwind.config.mjs'
              - 'postcss.config.mjs'
              - 'middleware.ts'
              - 'auth.ts'
            e2e:
              - 'app/**'
              - 'components/**'
              - 'lib/**'
              - 'pages/**'
              - 'e2e/**'
              - 'playwright.config.*'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - 'next.config.mjs'

      # Native addon sanity only when it matters (native deps changed or on main)
      - name: Verify sharp binding
        if: github.ref_name == 'main' || steps.filter.outputs.native == 'true'
        env:
          SHARP_IGNORE_GLOBAL_LIBVIPS: "1"
        run: |
          node -p "process.platform + ' ' + process.arch"
          node -e "require('sharp'); console.log('sharp: OK')"

      - name: Rebuild native addons (lightningcss + sharp)
        if: github.ref_name == 'main' || steps.filter.outputs.native == 'true'
        env:
          npm_config_platform: linux
          npm_config_arch: x64
          SHARP_IGNORE_GLOBAL_LIBVIPS: "1"
        run: |
          npm rebuild lightningcss --foreground-scripts
          npm rebuild sharp --foreground-scripts

      # Split the CI pipeline so we can selectively skip heavy steps
      - name: Lint
        run: npm run lint

      - name: Typecheck
        run: npm run typecheck

      - name: Format check
        run: npm run format:check

      - name: Unit tests
        run: npm run test:ci

      - name: Coverage gate
        env:
          COVERAGE_MINIMUM: "80"
        run: npm run coverage:check

      - name: Upload coverage summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json
          if-no-files-found: ignore
          retention-days: 14

      - name: Optimize images (changed only)
        if: steps.filter.outputs.images == 'true'
        run: npm run images:optimize

      - name: Images check (changed only)
        if: steps.filter.outputs.images == 'true'
        run: npm run images:check

      - name: Validate frontmatter
        if: github.event_name == 'schedule' || github.ref_name == 'main' || steps.filter.outputs.content == 'true'
        run: npm run validate-frontmatter

      - name: Validate SEO
        if: github.event_name == 'schedule' || github.ref_name == 'main' || steps.filter.outputs.seo == 'true'
        run: npm run validate-seo

      - name: Build
        if: github.event_name == 'schedule' || github.ref_name == 'main' || steps.filter.outputs.build == 'true' || steps.filter.outputs.security == 'true'
        # harmless env so Next/Auth won't crash during build
        env:
          DATABASE_URL: postgresql://dummy:dummy@127.0.0.1:5432/dummy?sslmode=disable&options=-c%20search_path%3Dauth%2Cdojo%2Cpublic
          NEXTAUTH_URL: http://localhost:3000
          AUTH_SECRET: ci-dummy
          GOOGLE_CLIENT_ID: ci-dummy
          GOOGLE_CLIENT_SECRET: ci-dummy
        run: npm run build

      - name: Security headers smoke test
        if: github.event_name == 'schedule' || github.ref_name == 'main' || steps.filter.outputs.security == 'true'
        env:
          PORT: 4010
          DATABASE_URL: postgresql://dummy:dummy@127.0.0.1:5432/dummy?sslmode=disable&options=-c%20search_path%3Dauth%2Cdojo%2Cpublic
          NEXTAUTH_URL: http://127.0.0.1:4010
          AUTH_SECRET: ci-dummy
          GOOGLE_CLIENT_ID: ci-dummy
          GOOGLE_CLIENT_SECRET: ci-dummy
        run: |
          set -euo pipefail
          npm run start > /tmp/next.log 2>&1 &
          NEXT_PID=$!
          cleanup() {
            kill "$NEXT_PID" 2>/dev/null || true
            wait "$NEXT_PID" 2>/dev/null || true
          }
          trap cleanup EXIT
          ready=0
          for i in $(seq 1 30); do
            if curl -sSf -o /dev/null "http://127.0.0.1:${PORT}/"; then
              ready=1
              break
            fi
            sleep 1
          done
          if [ "$ready" -ne 1 ]; then
            echo 'Next.js server failed to start in time' >&2
            exit 1
          fi
          npm run security-headers:check -- "http://127.0.0.1:${PORT}/"

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-check
    if: (github.event_name == 'pull_request' || github.ref_name == 'main') && (github.ref_name == 'main' || needs.build-and-check.outputs.run_e2e == 'true')
    env:
      NODE_ENV: test
      NEXT_TELEMETRY_DISABLED: 1
      VERCEL_ENV: preview
      # point Playwright to a cacheable path
      PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      # your app env
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      NEXTAUTH_URL: http://localhost:3000
      AUTH_SECRET: ci-dummy
      GOOGLE_CLIENT_ID: ci-dummy
      GOOGLE_CLIENT_SECRET: ci-dummy
      AUTH_RULES_JSON: '{"ownerDomains":["tullyelly.com"],"publicPaths":["/","/login","/api/auth"],"protectedPaths":["/shaolin-scrolls","/admin"],"ownerOnlyPaths":["/shaolin-scrolls/admin"],"toggles":{"allowAnyEmailOnPreview":true}}'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: ./.github/actions/setup

      # grab the local @playwright/test version for cache keying
      - name: Get Playwright version
        id: pw
        shell: bash
        run: |
          echo "version=$(node -e 'console.log(require(\"@playwright/test/package.json\").version)')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-pw-${{ steps.pw.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-pw-

      # ðŸŒŸ New: install browsers + OS deps via CLI (works on Ubuntu 24.04)
      # Specify chromium to keep it lean; drop "chromium" to install all browsers.
      - name: Install Playwright (browsers + OS deps)
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npx playwright test --reporter=html

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report
          path: playwright-report

      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/trace.zip
